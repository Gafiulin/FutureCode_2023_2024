По парам

with open('numbers.txt') as in_file:
    data = [int(x) for x in in_file]
    count = 0
    for i in range(1, len(data)):
        a, b = data[i - 1:i + 1]
        if (a + b) % 2 == 1:
            count += 1
    print(count)



Пятерочка

with open('data.txt') as in_file, open('answer.txt', 'w') as out_file:
    data = [int(x) for x in in_file]
    count = 0
    for i in range(1, len(data)):
        a, b = data[i - 1:i + 1]
        if (a + b) % 5 != 0 and a % 5 == 0 and b % 5 != 0 and b > a:
            count += 1        
        if (a + b) % 5 != 0 and a % 5 != 0 and b % 5 == 0 and a > b:
            count += 1
    out_file.write(str(count))



Треугольник

with open('triangles.txt') as in_file:
    data = [x for x in in_file]
    count = 0
    for i in data:
        a, b, c = i.split()
        a, b, c = int(a), int(b), int(c)
        if a < b + c and b < a + c and c < a + b:
            count += 1
    print(count)


Особенная сумма

with open('sequence.txt') as in_file:
    data = [int(x) for x in in_file.readlines()]
    max_s = s = max_count = count = 0
    for i in data:
        if i % 3 != 0:
            sum += i
            count += 1
        else:
            if count > max_count or count == max_count and s > max_s:
                max_s = s
                max_count = count            
            s = count = 0
    if count > max_count or count == max_count and s > max_s:
        max_s = s
        max_count = count        
    print(max_s)


 Четыре числа
 with open('task.txt') as in_file:
    data = [x for x in in_file]
    count = 0
    for i in data:
        a = [int(x) for x in i.split()]
        a.sort()
        if a[0] < a[1] and a[1] == a[2] and a[2] < a[3]:
            count += 1
    print(count)



Кривая Коха

from turtle import Turtle, done

frac = Turtle()
frac.speed(0)
length_long = 600
with open('koch.txt') as file:
    color = file.readline().rstrip()
    n = int(file.readline().rstrip())
frac.color(color)
axiom = 'F'
theorem = 'F-F+F-F'
rule = axiom
for _ in range(n):
    rule = rule.replace(axiom, theorem)
    length_long /= 3
frac.pu()
frac.goto(-300, 0)
frac.pd()
for item in rule:
    if item == 'F':
        frac.fd(length_long)
    elif item == '-':
        frac.lt(60)
    else:
        frac.rt(120)

frac.ht()
done()

